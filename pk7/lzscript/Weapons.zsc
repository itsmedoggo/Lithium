// Distributed under the CC0 public domain license.
// By Alison Sanderson. Attribution is encouraged, though not required.
// See licenses/cc0.txt for more information.

#include "lzscript/Weapons/1_ChargeFist.zsc"
#include "lzscript/Weapons/5_MissileLauncher.zsc"
#include "lzscript/Weapons/6_PlasmaDiffuser.zsc"

#include "lzscript/Weapons/Sword.zsc"
#include "lzscript/Weapons/Wings.zsc"

#include "lzscript/Weapons/OutcastsWeapon.zsc"

class Lith_WeaponScopedToken : Inventory {default {Inventory.MaxAmount 1;}}

class Lith_Weapon : Weapon;

default
{
   Inventory.PickupMessage "";
   Inventory.PickupSound "";
   Lith_Weapon.ScopeInSound "weapons/shotgun/zoomin";
   Lith_Weapon.ScopeOutSound "weapons/shotgun/zoomout";
   Lith_Weapon.ScopeZoom 1.0;
   Weapon.BobSpeed 1.5;
   Weapon.BobStyle "InverseSmooth";

   +INVENTORY.UNTOSSABLE;
   +WEAPON.NOALERT;
}

int m_Fired;
int m_Max;

private meta sound m_ScopeOutSnd;
private meta sound m_ScopeInSnd;
private meta float m_ScopeZoom;

property MagSize: m_Max;

property ScopeOutSound: m_ScopeOutSnd;
property ScopeInSound:  m_ScopeInSnd;
property ScopeZoom:     m_ScopeZoom;

// These flags are used for spawning pickup actors.
// UDMF maps have a surprising amount of control over things, so we have
// to use a load of flags to make this work properly.
const Lith_PF =
   SXF_TRANSFERTRANSLATION | SXF_TRANSFERAMBUSHFLAG  |
   SXF_TRANSFERPITCH       | SXF_TRANSFERPOINTERS    | SXF_TRANSFERSCALE |
   SXF_TRANSFERSPECIAL     | SXF_TRANSFERSTENCILCOL  | SXF_TRANSFERALPHA |
   SXF_TRANSFERRENDERSTYLE | SXF_TRANSFERSPRITEFRAME | SXF_TRANSFERROLL;

virtual state Lith_Ready(int flags) {return null;}

action state Lith_A_Ready(int flags = 0)
{
   let st = invoker.Lith_Ready(flags);
   if(st)
      return st;
   else
   {
      A_WeaponReady(flags | CallACS("Lith_GetWRF"));
      return null;
   }
}

action(Actor) void Lith_A_SpawnPickup(class<Actor> a)
   {A_SpawnItemEx(a, flags: Lith_PF);}

bool Lith_MagEmpty()
   {return m_Fired >= m_Max;}

virtual void Lith_ReloadFinish(bool isauto)
   {m_Fired = 0;}

action(Weapon) state Lith_A_JumpIfMagEmpty(bool autoreload = true, statelabel rsn = "Reload", statelabel esn = "FireEmpty")
{
   statelabel sn;
   if(autoreload) {
      if(CVar.GetCVar('lith_weapons_reloadempty', Player).GetBool()) sn = rsn;
      else                                                           sn = esn;
   } else {
      sn = rsn;
   }
   return invoker.Lith_MagEmpty() ? ResolveState(sn) : null;
}

action(Weapon) state Lith_A_JumpIfMagFull(statelabel sn = "ReadySelector")
   {return invoker.m_Fired ? null : ResolveState(sn);}

action(Weapon) void Lith_A_MagIncr(int amt = 1)
   {invoker.m_Fired = min(invoker.m_Fired + amt, invoker.m_Max);}

action(Weapon) void Lith_A_ReloadFinish()
   {invoker.Lith_ReloadFinish(false);}

action(Weapon) void Lith_A_TakeSlot3OptAmmo(int amt = 1)
{
   if(ACS_ExecuteWithResult(lsc_pdata, pdata_slot3ammo))
      A_TakeInventory("Lith_ShellAmmo", amt, TIF_NOTAKEINFINITE);
}

action(Weapon) state Lith_A_JumpIfNoSlot3OptAmmo(statelabel sn = "FireEmpty", int req = 1)
{
   if(!ACS_ExecuteWithResult(lsc_pdata, pdata_slot3ammo) || CountInv("Lith_ShellAmmo") >= req)
      return null;
   else
      return ResolveState(sn);
}

action(Weapon) void Lith_A_RecoilUp(double amt)
   {CallACS("Lith_RecoilUp", CVar.GetCVar('lith_weapons_recoil', Player).GetFloat() * amt * FIX);}

action(Weapon) void Lith_A_RecoilDn(double amt)
   {CallACS("Lith_RecoilUp", CVar.GetCVar('lith_weapons_recoil', Player).GetFloat() * (-amt/4) * FIX);}

action(Weapon) void Lith_A_ReloadBobUp(double amt)
   {CallACS("Lith_RecoilUp", CVar.GetCVar('lith_weapons_reloadbob', Player).GetFloat() * amt * FIX);}

action(Weapon) void Lith_A_ReloadBobDn(double amt)
   {CallACS("Lith_RecoilUp", CVar.GetCVar('lith_weapons_reloadbob', Player).GetFloat() * -amt * FIX);}

action(Weapon) void Lith_A_ScopeIn()
{
   if(!CountInv("Lith_WeaponScopedToken"))
   {
      A_GiveInventory("Lith_WeaponScopedToken", 1);
      A_ZoomFactor((1+ACS_ExecuteWithResult(lsc_pdata, pdata_weaponzoom)/FIX)*invoker.m_ScopeZoom);
      A_PlaySound(invoker.m_ScopeInSnd, CHAN_6);
   }
}

action(Weapon) void Lith_A_ScopeOut()
{
   if(CountInv("Lith_WeaponScopedToken"))
   {
      A_TakeInventory("Lith_WeaponScopedToken", 1);
      A_ZoomFactor(1.0, ZOOM_INSTANT);
      A_PlaySound(invoker.m_ScopeOutSnd, CHAN_6);
   }
}

action(Weapon) void Lith_A_ScopeToggle()
{
   if(CountInv("Lith_WeaponScopedToken")) Lith_A_ScopeOut();
   else                                   Lith_A_ScopeIn();
}

action(Weapon) void Lith_A_ZoomFactorScoped(float amount)
   {A_ZoomFactor((1+ACS_ExecuteWithResult(lsc_pdata, pdata_weaponzoom)/FIX) * amount * invoker.m_ScopeZoom);}

action(Weapon) void Lith_GunSmoke(class<Actor> type, float x, float y, bool ignoreCrouch)
{
   if(!ignoreCrouch) (y -= ((1.0 - GetCrouchFactor(AAPTR_DEFAULT)) * 10.0));
   A_FireProjectile(type, 0, 0, x, y, FPF_NOAUTOAIM);
}

action(Weapon) void Lith_A_GunSmoke(float x = 0, float y = 6, bool ignoreCrouch = false)
   {Lith_GunSmoke("Lith_GunSmokeSpawner", x, y, ignoreCrouch);}

action(Weapon) void Lith_A_GunSmokeSmall(float x = 0, float y = 6, bool ignoreCrouch = false)
   {Lith_GunSmoke("Lith_GunSmokeSpawnerSmall", x, y, ignoreCrouch);}

action void Lith_A_DropMag(class<Lith_DroppedMagazine> mag1, class<Lith_DroppedMagazine> mag2, float px, float py, float pz, float vx, float vy, float vz)
{
   float vh = Player.ViewZ - Player.MO.ViewHeight - Pos.Z;
   px += FRandom(-1, 1); py += FRandom(-1, 1); pz += FRandom(-1, 1);
   vx += FRandom(-1, 1); vy += FRandom(-1, 1); vz += FRandom(-1, 1);
   A_SpawnItemEx(invoker.Lith_MagEmpty() || !mag2 ? mag1 : mag2, px,py,pz+vh, vx,vy,vz);
}

action void Lith_A_Casing(class<Lith_CasingBase> cas, float px, float py, float pz, float vx, float vy, float vz)
{
   float vh = Player.ViewZ - Player.MO.ViewHeight - Pos.Z;
   px += FRandom(-1, 1); py += FRandom(-1, 1); pz += FRandom(-1, 1);
   vx += FRandom(-1, 1); vy += FRandom(-1, 1); vz += FRandom(-1, 1);
   A_SpawnItemEx(cas, Cos(Pitch)*px, py, pz-Sin(Pitch)*px+vh, vx, vy, vz);
}

action(Weapon) void Lith_FireBullets(float spread_horz, float spread_vert, int numbullets, int damage, int flags = 0, class<Actor> pufftype = "Lith_BulletPuff", float tracer_x = 0, float range = 8192)
{
   A_FireBullets(spread_horz, spread_vert, numbullets, damage, pufftype, flags, range, "Lith_BulletTracer", 7 + FRandom(-1, 0), tracer_x + FRandom(-0.7, 0.7));
}

states(Actor)
{
Spawn:
   TNT1 A 0;
   TNT1 A 0 {return bDROPPED ? ResolveState("Null") : ResolveState("SpawnPickup");}
   stop;
}

states(Weapon)
{
ReadySelector:
   #### # 0 {
      return CountInv("Lith_WeaponScopedToken") ? ResolveState("AltReady")
                                                : ResolveState("Ready");
   }
   stop;
DummyFlash:
   TNT1 A 0 A_AlertMonsters;
   stop;
}

// EOF
